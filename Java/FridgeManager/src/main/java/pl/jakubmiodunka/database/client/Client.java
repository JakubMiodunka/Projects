package pl.jakubmiodunka.database.client;

import pl.jakubmiodunka.database.client.exceptions.DatabaseConnectionException;
import pl.jakubmiodunka.database.client.exceptions.DatabaseQueryException;
import pl.jakubmiodunka.database.client.exceptions.QueryResultProcessingException;
import pl.jakubmiodunka.database.models.DatabaseCredentials;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.function.Function;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Database client meant to be used for low level interactions with specified database.
 * NOTE:
 * Not sure how to ensure that connection will be explicitly closed when some error
 * occur outside the class methods, so there is utilised one new connection per each query.
 * Don't want to rely on 'finalize' method and garbage collector - found that it is not recommended.
 *
 * @author Jakub Miodunka
 * */
public class Client {
    // URL and credentials of supported database
    private final DatabaseCredentials credentials;

    // Internally used logger
    private final Logger logger;

    /**
     * @param databaseCredentials Object containing database credentials.
     */
    public Client(DatabaseCredentials databaseCredentials) {
        // Properties init
        this.credentials = databaseCredentials;
        this.logger = LoggerFactory.getLogger(Client.class);
    }

    /**
     * Creates a new database connection.
     *
     * @return                             Newly established connection.
     * @throws DatabaseConnectionException When attempt to connect to database fail.
     */
    private Connection connect() {
        // Extracting necessary values from credentials model
        String url = this.credentials.getUrl();
        String username = this.credentials.getUsername();
        String password = this.credentials.getPassword();

        // Logging
        this.logger.debug("Connecting to '{}' database as '{}'...", url, username);

        try {
            // Attempting to connect to the database
            Connection newConnection = DriverManager.getConnection(url, username, password);

            // Logging
            this.logger.debug("Connected successfully.");

            // Returning the newly created connection
            return newConnection;

        } catch (SQLException exception) {
            // Logging
            String errorMessage = "Connection to database failed.";
            logger.error(errorMessage);

            // Exception wrapping
            throw new DatabaseConnectionException(errorMessage, exception);
        }
    }

    /**
     * Meant to execute 'SELECT' statements to import the data from database.
     * Validation, if 'SELECT' statement is used in given query is not implemented.
     *
     * @param  query                          Query, that will be used for data import.
     * @param  queryResultConverter           Function used for conversion the query result into a list of objects.
     *                                        In case of failure should throw QueryResultProcessingException.
     * @return                                List of objects, generated by queryResultConverter.
     * @throws DatabaseQueryException         When execution of given query fail.
     * @throws QueryResultProcessingException When conversion of imported data fail.
     * @throws DatabaseConnectionException    When connection to database fail.
     */
    public List<Object> importData(String query, Function<ResultSet, List<Object>> queryResultConverter) {
        // Logging
        this.logger.debug("Importing the data from '{}' database using following query: {}",
                this.credentials.getUrl(), query);

        try (Connection connection = this.connect()) {
            // Executing given query
            Statement statement = connection.createStatement();
            ResultSet importedData = statement.executeQuery(query);

            this.logger.debug("Import successful.");

            // Converting imported data into a list of objects
            this.logger.debug("Converting imported data into a list of objects...");

            List<Object> convertedData;

            try {
                convertedData = queryResultConverter.apply((importedData));
            }
            catch (QueryResultProcessingException exception) {
                // Logging
                this.logger.error("Failed to convert imported data.");
                this.logger.debug("Closing connection to database.");

                // Rethrowing exception
                throw exception;
            }

            this.logger.debug("Conversion successful.");

            // Returning converted data
            this.logger.debug("Closing connection to database.");

            return convertedData;

        } catch (SQLException exception) {
            // Logging
            String errorMessage = "Failed to execute the query.";
            this.logger.error(errorMessage);
            this.logger.debug("Closing connection to database.");

            // Exception wrapping
            throw new DatabaseQueryException(errorMessage, exception);
        }
    }

    /**
     * Meant to update the database using statements like 'UPDATE', 'INSERT' or 'DELETE'.
     * Validation, if those statement is used in given query is not implemented.
     *
     * @param  query                       Query, that will be used for database update.
     * @throws DatabaseQueryException      When execution of given query fail.
     * @throws DatabaseConnectionException When connection to database fail.
     */
    public void updateData(String query) {
        // Logging
        this.logger.debug("Updating the '{}' database using following query: {}", this.credentials.getUrl(), query);

        try (Connection connection = this.connect()) {
            // Executing given query
            Statement statement = connection.createStatement();
            statement.executeUpdate(query);

            this.logger.debug("Update successful.");
            this.logger.debug("Closing connection to database.");

        } catch (SQLException exception) {
            // Logging
            String errorMessage = "Failed to execute the query.";
            this.logger.error(errorMessage);
            this.logger.debug("Closing connection to database.");

            //Exception wrapping
            throw new DatabaseQueryException(errorMessage, exception);
        }

        // Logging
        this.logger.debug("Database update successful.");
    }
}